{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Vico is a light and extensible chart library for Android. The wiki touches on more complex topics. We recommend you read the README first. See also the sample app and the API reference .","title":"Introduction"},{"location":"#introduction","text":"Vico is a light and extensible chart library for Android. The wiki touches on more complex topics. We recommend you read the README first. See also the sample app and the API reference .","title":"Introduction"},{"location":"core-topics/chart-axes/","text":"You can display axes along each of the four edges of a chart. Creating axes Axes can be added to a chart as follows: In Jetpack Compose, use the *axis parameters of the Chart composable, and create axes via the provided *axis composable functions (e.g., bottomAxis ). In the view system, axes can be added to charts via XML attributes or programmatically (in which case we recommend using the create*Axis builder functions). Customizing axes You can customize the appearance of charts axes, including the style of the line, the ticks, the labels, and more. You can also define titles for axes. Axes can be customized as follows: In Jetpack Compose, each of the four *axis composable functions has parameters that allow for customization. In the view system, axes can be customized via XML attributes or programmatically. For an example of programmatic customization, see ViewStackedColumnChart in the sample app. To create entirely custom axes, you can write your own VerticalAxis and HorizontalAxis implementations. AxisValueFormatter s AxisValueFormatter s ( AxisValueFormatter inherits from ValueFormatter , described in \u201c Value formatters \u201d) enable you to format the values displayed along chart axes. Three AxisValueFormatter implementations are included in the library: DecimalAxisValueFormatter , DefaultAxisValueFormatter , and PercentageFormatAxisValueFormatter . You can create your own implementations. To define an AxisValueFormatter for a chart axis, do the following: In Jetpack Compose, use the valueFormatter parameter of any of the four *axis composables. In the view system, use the valueFormatter field of Axis (see here ). Examples See the sample app for multiple examples in both Jetpack Compose and the view system.","title":"Chart axes"},{"location":"core-topics/chart-axes/#creating-axes","text":"Axes can be added to a chart as follows: In Jetpack Compose, use the *axis parameters of the Chart composable, and create axes via the provided *axis composable functions (e.g., bottomAxis ). In the view system, axes can be added to charts via XML attributes or programmatically (in which case we recommend using the create*Axis builder functions).","title":"Creating axes"},{"location":"core-topics/chart-axes/#customizing-axes","text":"You can customize the appearance of charts axes, including the style of the line, the ticks, the labels, and more. You can also define titles for axes. Axes can be customized as follows: In Jetpack Compose, each of the four *axis composable functions has parameters that allow for customization. In the view system, axes can be customized via XML attributes or programmatically. For an example of programmatic customization, see ViewStackedColumnChart in the sample app. To create entirely custom axes, you can write your own VerticalAxis and HorizontalAxis implementations.","title":"Customizing axes"},{"location":"core-topics/chart-axes/#axisvalueformatters","text":"AxisValueFormatter s ( AxisValueFormatter inherits from ValueFormatter , described in \u201c Value formatters \u201d) enable you to format the values displayed along chart axes. Three AxisValueFormatter implementations are included in the library: DecimalAxisValueFormatter , DefaultAxisValueFormatter , and PercentageFormatAxisValueFormatter . You can create your own implementations. To define an AxisValueFormatter for a chart axis, do the following: In Jetpack Compose, use the valueFormatter parameter of any of the four *axis composables. In the view system, use the valueFormatter field of Axis (see here ).","title":"AxisValueFormatters"},{"location":"core-topics/chart-axes/#examples","text":"See the sample app for multiple examples in both Jetpack Compose and the view system.","title":"Examples"},{"location":"core-topics/chart-types/","text":"Chart types define how data is presented on a chart. All chart types offer customization options, which are described later on in this wiki. You can create your own chart types by extending BaseChart or Chart . Note that the way data is represented on a chart depends on the chart type, but the chart type doesn\u2019t control elements such as markers and axes. Line charts Line charts display data as a continuous line or, in the case of ChartEntryModel s containing multiple datasets, multiple lines. Each line in a line chart can be individually customized (see LineSpec ). Line charts also support data labels, which are displayed for each key point on the line (that is, for each y-axis value defined in the line\u2019s corresponding dataset). Column charts Column charts display data in the form of columns. For ChartEntryModel s containing multiple datasets, multiple columns are displayed per chart segment, in which case they can be grouped (displayed next to each other) or stacked (placed on top of one another). Like line charts, column charts support data labels. These are displayed near the top edge of each column. Composed charts Composed charts comprise any number of charts. These can be of different types. The charts in a composed chart can be independently scaled, which can be configured via targetVerticalAxisPosition parameter of LineChart and ColumnChart . Setting the type of a chart You can set the type of a chart as follows: In the view system, use the chart attribute of ChartView (possible values: line , column , and stackedColumn ). To create a composed chart, use ComposedChartView and its charts attribute (example: line|column ). To provide a custom Chart implementation, use the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ). In Jetpack Compose, use the chart parameter of the Chart composable. You can use the lineChart or columnChart function, or provide a custom Chart implementation. To create a composed chart, use the + operator: lineChart () + columnChart () Examples See the sample app for multiple examples in both Jetpack Compose and the view system.","title":"Chart types"},{"location":"core-topics/chart-types/#line-charts","text":"Line charts display data as a continuous line or, in the case of ChartEntryModel s containing multiple datasets, multiple lines. Each line in a line chart can be individually customized (see LineSpec ). Line charts also support data labels, which are displayed for each key point on the line (that is, for each y-axis value defined in the line\u2019s corresponding dataset).","title":"Line charts"},{"location":"core-topics/chart-types/#column-charts","text":"Column charts display data in the form of columns. For ChartEntryModel s containing multiple datasets, multiple columns are displayed per chart segment, in which case they can be grouped (displayed next to each other) or stacked (placed on top of one another). Like line charts, column charts support data labels. These are displayed near the top edge of each column.","title":"Column charts"},{"location":"core-topics/chart-types/#composed-charts","text":"Composed charts comprise any number of charts. These can be of different types. The charts in a composed chart can be independently scaled, which can be configured via targetVerticalAxisPosition parameter of LineChart and ColumnChart .","title":"Composed charts"},{"location":"core-topics/chart-types/#setting-the-type-of-a-chart","text":"You can set the type of a chart as follows: In the view system, use the chart attribute of ChartView (possible values: line , column , and stackedColumn ). To create a composed chart, use ComposedChartView and its charts attribute (example: line|column ). To provide a custom Chart implementation, use the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ). In Jetpack Compose, use the chart parameter of the Chart composable. You can use the lineChart or columnChart function, or provide a custom Chart implementation. To create a composed chart, use the + operator: lineChart () + columnChart ()","title":"Setting the type of a chart"},{"location":"core-topics/chart-types/#examples","text":"See the sample app for multiple examples in both Jetpack Compose and the view system.","title":"Examples"},{"location":"core-topics/custom-data-types/","text":"You may need to display different types of data on a chart: dates, temperatures, etc. You can achieve this by creating custom AxisValueFormatter and ChartEntry implementations. Example overview In this example, we\u2019ll display display values for four arbitrary dates. First, write a custom ChartEntry implementation with a localDate field. Then, build a map where consecutive integers are linked to instances of your custom ChartEntry implementation, and create a ChartEntryModelProducer to provide this data. class Entry ( val localDate : LocalDate , override val x : Float , override val y : Float , ) : ChartEntry { override fun withY ( y : Float ) = Entry ( localDate = this . localDate , x = this . x , y = y , ) } val chartEntryModelProducer = listOf ( \"2022-07-14\" to 1.3f , \"2022-07-15\" to 2.5f , \"2022-07-17\" to 2.5f , \"2022-08-01\" to 3f , ). mapIndexed { index , ( dateString , y ) -> Entry ( localDate = LocalDate . parse ( dateString ), x = index . toFloat (), y = y , ) }. let { entryCollection -> ChartEntryModelProducer ( entryCollection ) } To display days of the month (rather than one of the consecutive integers used as the keys of the entries map) along the bottom axis, create an AxisValueFormatter . See \u201c AxisValueFormatter s\u201d under \u201cChart axes\u201d for more information. AxisValueFormatter < AxisPosition . Horizontal > { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () } Example implementation The chart described above can be implemented as follows. Entry and chartEntryModelProducer are defined in the first code sample in this document. Jetpack Compose val bottomAxis = bottomAxis ( valueFormatter = { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () }, ) Chart ( chart = columnChart (), chartModelProducer = chartEntryModelProducer , startAxis = startAxis (), bottomAxis = bottomAxis , ) View system <com.patrykandpatryk.vico.view.chart.ChartView android:id= \"@+id/chart\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:chart= \"column\" app:showBottomAxis= \"true\" app:showStartAxis= \"true\" /> with ( findViewById < ChartView > ( R . id . chart )) { entryProducer = chartEntryModelProducer ( bottomAxis as HorizontalAxis ). valueFormatter = AxisValueFormatter { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () } }","title":"Custom data types"},{"location":"core-topics/custom-data-types/#example-overview","text":"In this example, we\u2019ll display display values for four arbitrary dates. First, write a custom ChartEntry implementation with a localDate field. Then, build a map where consecutive integers are linked to instances of your custom ChartEntry implementation, and create a ChartEntryModelProducer to provide this data. class Entry ( val localDate : LocalDate , override val x : Float , override val y : Float , ) : ChartEntry { override fun withY ( y : Float ) = Entry ( localDate = this . localDate , x = this . x , y = y , ) } val chartEntryModelProducer = listOf ( \"2022-07-14\" to 1.3f , \"2022-07-15\" to 2.5f , \"2022-07-17\" to 2.5f , \"2022-08-01\" to 3f , ). mapIndexed { index , ( dateString , y ) -> Entry ( localDate = LocalDate . parse ( dateString ), x = index . toFloat (), y = y , ) }. let { entryCollection -> ChartEntryModelProducer ( entryCollection ) } To display days of the month (rather than one of the consecutive integers used as the keys of the entries map) along the bottom axis, create an AxisValueFormatter . See \u201c AxisValueFormatter s\u201d under \u201cChart axes\u201d for more information. AxisValueFormatter < AxisPosition . Horizontal > { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () }","title":"Example overview"},{"location":"core-topics/custom-data-types/#example-implementation","text":"The chart described above can be implemented as follows. Entry and chartEntryModelProducer are defined in the first code sample in this document.","title":"Example implementation"},{"location":"core-topics/custom-data-types/#jetpack-compose","text":"val bottomAxis = bottomAxis ( valueFormatter = { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () }, ) Chart ( chart = columnChart (), chartModelProducer = chartEntryModelProducer , startAxis = startAxis (), bottomAxis = bottomAxis , )","title":"Jetpack Compose"},{"location":"core-topics/custom-data-types/#view-system","text":"<com.patrykandpatryk.vico.view.chart.ChartView android:id= \"@+id/chart\" android:layout_width= \"wrap_content\" android:layout_height= \"wrap_content\" app:chart= \"column\" app:showBottomAxis= \"true\" app:showStartAxis= \"true\" /> with ( findViewById < ChartView > ( R . id . chart )) { entryProducer = chartEntryModelProducer ( bottomAxis as HorizontalAxis ). valueFormatter = AxisValueFormatter { value , chartValues -> ( chartValues . chartEntryModel . entries [ 0 ] . getOrNull ( value . toInt ()) as Entry?) ?. localDate ?. run { \" $ dayOfMonth / $ monthValue \" } . orEmpty () } }","title":"View system"},{"location":"core-topics/decorations-and-markers/","text":"In addition to customizing charts, you can add decorations and markers to them. Decorations Decorations display an additional layer of data. They can be added to a chart as follows: In Jetpack Compose, use the decorations parameter of columnChart and lineChart . In the view system, use the addDecoration , addDecorations , setDecorations , removeDecoration , and removeDecorations functions. These are accessible via the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ). Threshold lines Threshold lines are horizontal lines or boxes that highlight a specific value or range of values. You can use them to mark averages, target values, and so on. To create a threshold line, use the ThresholdLine class. It has two constructors: one for a threshold line highlighting a single value, and another one for a threshold line highlighting a range of values. Some examples: a threshold line highlighting a range ThresholdLine ( thresholdRange = 2f .. 3f , lineComponent = ShapeComponent ( color = Color . BLACK , strokeWidthDp = 2f , dynamicShader = ComponentShader ( ShapeComponent ( shape = Shapes . pillShape , color = Color . DKGRAY ), componentSizeDp = 4f , ), ), labelComponent = textComponent ( Color . Black ). setPadding ( horizontal = 8f ), ) a threshold line highlighting a single value ThresholdLine ( thresholdValue = 2.5f , lineComponent = ShapeComponent ( color = Color . BLACK , shape = Shapes . roundedCornerShape ( bottomLeftPercent = 100 ), ), labelComponent = textComponent { color = Color . WHITE background = ShapeComponent ( shape = CorneredShape ( topLeft = Corner . Relative ( percentage = 25 , cornerTreatment = RoundedCornerTreatment , ), topRight = Corner . Relative ( percentage = 50 , cornerTreatment = CutCornerTreatment , ), ), color = Color . BLACK , ) }. setPadding ( horizontal = 8f ), minimumLineThicknessDp = 2f , ) Markers Markers highlight the y value corresponding to a specific value on the x-axis. They can be shown when a chart is touched, or you can make them persistent. To create a marker, use the MarkerComponent class or create your own implementation of the Marker interface. A marker can be added to a chart as follows: In Jetpack Compose, use the marker parameter of the Chart composable to add a marker displayed when a chart is touched, and use the persistentMarkers parameter of columnChart and lineChart to add persistent markers. In the view system, use use the marker field of BaseChartView to add a marker displayed when a chart is touched, and use the addPersistentMarker , setPersistentMarkers , and removePersistentMarker functions to add and remove persistent markers. These functions are accessible via the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ). To listen to marker visibility changes, use MarkerVisibilityChangeListener : In Jetpack Compose, use the markerVisibilityChangeListener parameter of the Chart composable. In the view system, use the markerVisibilityChangeListener field of BaseChartView . Below is an example of how a marker can be created. Also see getMarker in the sample app . val labelBackgroundShape = MarkerCorneredShape ( all = Corner . FullyRounded ) val label = textComponent { color = Color . WHITE padding = dimensionsOf ( horizontalDp = 8f , verticalDp = 4f ) typeface = Typeface . MONOSPACE background = ShapeComponent ( shape = labelBackgroundShape ) . setShadow ( color = Color . BLACK . copyColor ( alpha = 0.3f ), radius = SHADOW_RADIUS , dy = SHADOW_DY , applyElevationOverlay = true , ) } val indicator = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK . copyColor ( alpha = 0.25f )), innerPaddingAllDp = 10f , inner = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape ), inner = ShapeComponent ( shape = pillShape , color = Color . GRAY ), innerPaddingAllDp = 5f , ), ) val guideline = LineComponent ( color = guidelineColor , thicknessDp = 2f , shape = DashedShape ( shape = pillShape , dashLengthDp = 8f , gapLengthDp = 4f ), ) return object : MarkerComponent ( label = label , indicator = indicator , guideline = guideline , ) { init { indicatorSizeDp = INDICATOR_SIZE_DP } override fun getInsets ( context : MeasureContext , outInsets : Insets ) = with ( context ) { outInsets . top = label . getHeight ( this ) + labelBackgroundShape . tickSizeDp . pixels + SHADOW_RADIUS . pixels * SHADOW_RADIUS_TO_PX_MULTIPLIER - SHADOW_DY . pixels } }","title":"Decorations and markers"},{"location":"core-topics/decorations-and-markers/#decorations","text":"Decorations display an additional layer of data. They can be added to a chart as follows: In Jetpack Compose, use the decorations parameter of columnChart and lineChart . In the view system, use the addDecoration , addDecorations , setDecorations , removeDecoration , and removeDecorations functions. These are accessible via the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ).","title":"Decorations"},{"location":"core-topics/decorations-and-markers/#threshold-lines","text":"Threshold lines are horizontal lines or boxes that highlight a specific value or range of values. You can use them to mark averages, target values, and so on. To create a threshold line, use the ThresholdLine class. It has two constructors: one for a threshold line highlighting a single value, and another one for a threshold line highlighting a range of values. Some examples: a threshold line highlighting a range ThresholdLine ( thresholdRange = 2f .. 3f , lineComponent = ShapeComponent ( color = Color . BLACK , strokeWidthDp = 2f , dynamicShader = ComponentShader ( ShapeComponent ( shape = Shapes . pillShape , color = Color . DKGRAY ), componentSizeDp = 4f , ), ), labelComponent = textComponent ( Color . Black ). setPadding ( horizontal = 8f ), ) a threshold line highlighting a single value ThresholdLine ( thresholdValue = 2.5f , lineComponent = ShapeComponent ( color = Color . BLACK , shape = Shapes . roundedCornerShape ( bottomLeftPercent = 100 ), ), labelComponent = textComponent { color = Color . WHITE background = ShapeComponent ( shape = CorneredShape ( topLeft = Corner . Relative ( percentage = 25 , cornerTreatment = RoundedCornerTreatment , ), topRight = Corner . Relative ( percentage = 50 , cornerTreatment = CutCornerTreatment , ), ), color = Color . BLACK , ) }. setPadding ( horizontal = 8f ), minimumLineThicknessDp = 2f , )","title":"Threshold lines"},{"location":"core-topics/decorations-and-markers/#markers","text":"Markers highlight the y value corresponding to a specific value on the x-axis. They can be shown when a chart is touched, or you can make them persistent. To create a marker, use the MarkerComponent class or create your own implementation of the Marker interface. A marker can be added to a chart as follows: In Jetpack Compose, use the marker parameter of the Chart composable to add a marker displayed when a chart is touched, and use the persistentMarkers parameter of columnChart and lineChart to add persistent markers. In the view system, use use the marker field of BaseChartView to add a marker displayed when a chart is touched, and use the addPersistentMarker , setPersistentMarkers , and removePersistentMarker functions to add and remove persistent markers. These functions are accessible via the chart field of BaseChartView (which is extended by ChartView and ComposedChartView ). To listen to marker visibility changes, use MarkerVisibilityChangeListener : In Jetpack Compose, use the markerVisibilityChangeListener parameter of the Chart composable. In the view system, use the markerVisibilityChangeListener field of BaseChartView . Below is an example of how a marker can be created. Also see getMarker in the sample app . val labelBackgroundShape = MarkerCorneredShape ( all = Corner . FullyRounded ) val label = textComponent { color = Color . WHITE padding = dimensionsOf ( horizontalDp = 8f , verticalDp = 4f ) typeface = Typeface . MONOSPACE background = ShapeComponent ( shape = labelBackgroundShape ) . setShadow ( color = Color . BLACK . copyColor ( alpha = 0.3f ), radius = SHADOW_RADIUS , dy = SHADOW_DY , applyElevationOverlay = true , ) } val indicator = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK . copyColor ( alpha = 0.25f )), innerPaddingAllDp = 10f , inner = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape ), inner = ShapeComponent ( shape = pillShape , color = Color . GRAY ), innerPaddingAllDp = 5f , ), ) val guideline = LineComponent ( color = guidelineColor , thicknessDp = 2f , shape = DashedShape ( shape = pillShape , dashLengthDp = 8f , gapLengthDp = 4f ), ) return object : MarkerComponent ( label = label , indicator = indicator , guideline = guideline , ) { init { indicatorSizeDp = INDICATOR_SIZE_DP } override fun getInsets ( context : MeasureContext , outInsets : Insets ) = with ( context ) { outInsets . top = label . getHeight ( this ) + labelBackgroundShape . tickSizeDp . pixels + SHADOW_RADIUS . pixels * SHADOW_RADIUS_TO_PX_MULTIPLIER - SHADOW_DY . pixels } }","title":"Markers"},{"location":"core-topics/handling-chart-data/","text":"Chart data in Vico is stored in ChartEntryModel s. A ChartEntry holds data about an individual entry on a chart (for example, a single column). Static data For static data (that is, data that remains unchanged), create a ChartEntryModel instance (for simple charts) or a ComposedChartEntryModel instance (for composed charts). ComposedChartEntryModel extends ChartEntryModel . Factory functions are available, including entryModelOf and composedChartEntryModelOf . You can apply a ChartEntryModel or ComposedChartEntryModel to a chart as follows: In Jetpack Compose, use the model parameter of the Chart composable. In the view system, use the model field of BaseChartView (which is extended by ChartView and ComposedChartView ). Dynamic data For dynamic data (that is, data that may change), use ChartModelProducer s. Every ChartModelProducer implementation has a getModel function that returns a ChartEntryModel , and a progressModel function for difference animations. The progressModel function calculates intermediate lists of entries, which should happen on a thread other than the main one, so as not to cause lags. In addition, ChartModelProducer declares two listener-related functions: registerForUpdates and unregisterFromUpdates . Vico includes two default ChartModelProducer implementations: ChartEntryModelProducer (for simple charts) and ComposedChartEntryModelProducer (for composed charts). You can create an instance of either and apply it to a chart as follows: In Jetpack Compose, use the chartModelProducer parameter of the Chart composable. In the view system, use the entryProducer field of BaseChartView (which is extended by ChartView and ComposedChartView ). Differences are animated by default (see DefaultDiffProcessor ). Examples See the README and ShowcaseViewModel in the sample app for multiple examples.","title":"Handling chart data"},{"location":"core-topics/handling-chart-data/#static-data","text":"For static data (that is, data that remains unchanged), create a ChartEntryModel instance (for simple charts) or a ComposedChartEntryModel instance (for composed charts). ComposedChartEntryModel extends ChartEntryModel . Factory functions are available, including entryModelOf and composedChartEntryModelOf . You can apply a ChartEntryModel or ComposedChartEntryModel to a chart as follows: In Jetpack Compose, use the model parameter of the Chart composable. In the view system, use the model field of BaseChartView (which is extended by ChartView and ComposedChartView ).","title":"Static data"},{"location":"core-topics/handling-chart-data/#dynamic-data","text":"For dynamic data (that is, data that may change), use ChartModelProducer s. Every ChartModelProducer implementation has a getModel function that returns a ChartEntryModel , and a progressModel function for difference animations. The progressModel function calculates intermediate lists of entries, which should happen on a thread other than the main one, so as not to cause lags. In addition, ChartModelProducer declares two listener-related functions: registerForUpdates and unregisterFromUpdates . Vico includes two default ChartModelProducer implementations: ChartEntryModelProducer (for simple charts) and ComposedChartEntryModelProducer (for composed charts). You can create an instance of either and apply it to a chart as follows: In Jetpack Compose, use the chartModelProducer parameter of the Chart composable. In the view system, use the entryProducer field of BaseChartView (which is extended by ChartView and ComposedChartView ). Differences are animated by default (see DefaultDiffProcessor ).","title":"Dynamic data"},{"location":"core-topics/handling-chart-data/#examples","text":"See the README and ShowcaseViewModel in the sample app for multiple examples.","title":"Examples"},{"location":"core-topics/legends/","text":"A Legend describes the elements present on a chart. Adding a legend to a chart Here\u2019s how to add a Legend to a chart: In Jetpack Compose, use the legend parameter of the Chart composable function. In the view system, use the legend field of BaseChartView (which is extended by ChartView and ComposedChartView ). VerticalLegend Vico includes one Legend implementation: VerticalLegend , which displays its items in a vertical list. Each item of a VerticalLegend comprises an icon and a label. VerticalLegend offers multiple customization options (see the API reference). If using Jetpack Compose, you can create a VerticalLegend via the verticalLegend composable function. Examples See the sample app for examples in both Jetpack Compose and the view system. In particular, see LineChartWithLabelsInside.kt .","title":"Legends"},{"location":"core-topics/legends/#adding-a-legend-to-a-chart","text":"Here\u2019s how to add a Legend to a chart: In Jetpack Compose, use the legend parameter of the Chart composable function. In the view system, use the legend field of BaseChartView (which is extended by ChartView and ComposedChartView ).","title":"Adding a legend to a chart"},{"location":"core-topics/legends/#verticallegend","text":"Vico includes one Legend implementation: VerticalLegend , which displays its items in a vertical list. Each item of a VerticalLegend comprises an icon and a label. VerticalLegend offers multiple customization options (see the API reference). If using Jetpack Compose, you can create a VerticalLegend via the verticalLegend composable function.","title":"VerticalLegend"},{"location":"core-topics/legends/#examples","text":"See the sample app for examples in both Jetpack Compose and the view system. In particular, see LineChartWithLabelsInside.kt .","title":"Examples"},{"location":"core-topics/value-formatters/","text":"ValueFormatter s format numeric values for display. A ValueFormatter implementation must contain a formatValue function with two parameters: value (the value to format) and chartValues (the ChartValues instance used by the chart from which the value comes). The return type of this function is CharSequence . Three ValueFormatter implementations are included in the library: DecimalFormatValueFormatter , DefaultValueFormatter , and PercentageFormatValueFormatter . You can create your own implementations. ValueFormatter s are used for data labels in line charts and column charts. For chart axes, use AxisValueFormatter s (see \u201c Chart axes .\u201d) The AxisValueFormatter interface inherits from ValueFormatter .","title":"Value formatters"},{"location":"customization/components/","text":"Component is the basic building block for nearly every part of Vico. It is used to draw content (e.g., a shape) in a given rectangle. ShapeComponent ShapeComponent is a subclass of Component that draws a Shape . The Shape can have a specific solid color, a stroke, or a DynamicShader . For all available parameters, see the documentation . ShapeComponent ( color = Color . BLACK , dynamicShader = ComponentShader ( ShapeComponent ( shape = Shapes . pillShape , color = Color . DKGRAY ), componentSizeDp = 4f , ), strokeWidthDp = 2f , strokeColor = Color . BLACK , ) LineComponent LineComponent is an extension of ShapeComponent that allows for specifying a fixed thickness of the drawn line. It is used, for example, to draw columns in ColumnChart , and axis lines, ticks, and guidelines in Axis . LineComponent ( color = Color . BLACK , thicknessDp = 8f , shape = Shapes . roundedCornerShape ( allPercent = 40 , ), ) TextComponent TextComponent renders text on Android\u2019s Canvas . It is used for elements such as axis labels. TextComponent supports automatic line breaks, rotation, backgrounds, margins, padding, and more. For all available parameters, see the documentation . buildTextComponent { color = Color . BLACK textSizeSp = 12f typeface = Typeface . MONOSPACE ellipsize = TextUtils . TruncateAt . END } The textComponent DSL is the quickest way to create a TextComponent , but you can also use the Builder class . OverlayingComponent OverlayingComponent overlays one component with another one and allows for specifying the padding between the two components. This enables the creation of complex UI elements. For all parameters of OverlayingComponent , see the documentation . The above OverlayingComponent can be created as follows: OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK . copyColor ( alpha = 0.25f )), innerPaddingAllDp = 10f , inner = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK ), inner = ShapeComponent ( shape = pillShape , color = Color . GRAY ), innerPaddingAllDp = 5f , ), )","title":"Components"},{"location":"customization/components/#shapecomponent","text":"ShapeComponent is a subclass of Component that draws a Shape . The Shape can have a specific solid color, a stroke, or a DynamicShader . For all available parameters, see the documentation . ShapeComponent ( color = Color . BLACK , dynamicShader = ComponentShader ( ShapeComponent ( shape = Shapes . pillShape , color = Color . DKGRAY ), componentSizeDp = 4f , ), strokeWidthDp = 2f , strokeColor = Color . BLACK , )","title":"ShapeComponent"},{"location":"customization/components/#linecomponent","text":"LineComponent is an extension of ShapeComponent that allows for specifying a fixed thickness of the drawn line. It is used, for example, to draw columns in ColumnChart , and axis lines, ticks, and guidelines in Axis . LineComponent ( color = Color . BLACK , thicknessDp = 8f , shape = Shapes . roundedCornerShape ( allPercent = 40 , ), )","title":"LineComponent"},{"location":"customization/components/#textcomponent","text":"TextComponent renders text on Android\u2019s Canvas . It is used for elements such as axis labels. TextComponent supports automatic line breaks, rotation, backgrounds, margins, padding, and more. For all available parameters, see the documentation . buildTextComponent { color = Color . BLACK textSizeSp = 12f typeface = Typeface . MONOSPACE ellipsize = TextUtils . TruncateAt . END } The textComponent DSL is the quickest way to create a TextComponent , but you can also use the Builder class .","title":"TextComponent"},{"location":"customization/components/#overlayingcomponent","text":"OverlayingComponent overlays one component with another one and allows for specifying the padding between the two components. This enables the creation of complex UI elements. For all parameters of OverlayingComponent , see the documentation . The above OverlayingComponent can be created as follows: OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK . copyColor ( alpha = 0.25f )), innerPaddingAllDp = 10f , inner = OverlayingComponent ( outer = ShapeComponent ( shape = pillShape , color = Color . BLACK ), inner = ShapeComponent ( shape = pillShape , color = Color . GRAY ), innerPaddingAllDp = 5f , ), )","title":"OverlayingComponent"},{"location":"customization/customization-in-jetpack-compose/","text":"Customization in Jetpack Compose Vico allows for each chart to be customized individually. For example, the lineChart function has parameters for the line thickness, the line color, and so on. However, we recommend you create a common chart style and override it if needed. You can do this as described below. ProvideChartStyle ProvideChartStyle is similar to MaterialTheme from compose.material and compose.material3 . It can be used as follows. To access the provided value, use currentChartStyle . ProvideChartStyle(chartStyle = ChartStyle(...)) { ... } Functions such as lineChart use the values provided via ProvideChartStyle as the defaults for their parameters. For example, the default value for the lines parameter of lineChart is currentChartStyle.lineChart.lines . m2ChartStyle & m3ChartStyle If you use compose.material or compose.material3 in your app, you can use the m2ChartStyle ( compose-m2 artifact) or m3ChartStyle ( compose-m3 artifact) function to create a baseline ChartStyle implementation that uses the colors from your app\u2019s Material Theme: ProvideChartStyle(chartStyle = m3ChartStyle()) { ... } ChartStyle A ChartStyle instance comprises these fields: Field Description axis The appearance of chart axes (a ChartStyle.Axis instance). columnChart The appearance of column charts (a ChartStyle.ColumnChart instance). lineChart The appearance of line charts (a ChartStyle.LineChart instance). marker The appearance of chart markers (a ChartStyle.Marker instance).","title":"Customization in Jetpack Compose"},{"location":"customization/customization-in-jetpack-compose/#customization-in-jetpack-compose","text":"Vico allows for each chart to be customized individually. For example, the lineChart function has parameters for the line thickness, the line color, and so on. However, we recommend you create a common chart style and override it if needed. You can do this as described below.","title":"Customization in Jetpack Compose"},{"location":"customization/customization-in-jetpack-compose/#providechartstyle","text":"ProvideChartStyle is similar to MaterialTheme from compose.material and compose.material3 . It can be used as follows. To access the provided value, use currentChartStyle . ProvideChartStyle(chartStyle = ChartStyle(...)) { ... } Functions such as lineChart use the values provided via ProvideChartStyle as the defaults for their parameters. For example, the default value for the lines parameter of lineChart is currentChartStyle.lineChart.lines .","title":"ProvideChartStyle"},{"location":"customization/customization-in-jetpack-compose/#m2chartstyle-m3chartstyle","text":"If you use compose.material or compose.material3 in your app, you can use the m2ChartStyle ( compose-m2 artifact) or m3ChartStyle ( compose-m3 artifact) function to create a baseline ChartStyle implementation that uses the colors from your app\u2019s Material Theme: ProvideChartStyle(chartStyle = m3ChartStyle()) { ... }","title":"m2ChartStyle &amp; m3ChartStyle"},{"location":"customization/customization-in-jetpack-compose/#chartstyle","text":"A ChartStyle instance comprises these fields: Field Description axis The appearance of chart axes (a ChartStyle.Axis instance). columnChart The appearance of column charts (a ChartStyle.ColumnChart instance). lineChart The appearance of line charts (a ChartStyle.LineChart instance). marker The appearance of chart markers (a ChartStyle.Marker instance).","title":"ChartStyle"},{"location":"customization/customization-in-the-view-system/","text":"In the view system, charts can be customized via XML attributes. You can make more advanced changes programmatically. View attributes BaseChartView attributes Name Description Type axisStyle The style of chart axes. An Axis attribute set. columnChartStyle The style of column charts. A ColumnChartStyle attribute set. lineChartStyle The style of line charts. A LineChartStyle attribute set. show*Axis Whether to show a specific axis. A boolean. chartHorizontalScrollingEnabled Whether to enable horizontal scrolling. A boolean. chartZoomEnabled Whether to enable zooming. A boolean. ChartView attributes ChartView has all the attributes of BaseChartView , plus the following. Name Description Value chart The chart type. column , stackedColumn , or line . ComposedChartView attributes ComposedChartView has all the attributes of BaseChartView , plus the following. Name Description Value charts The chart types. Any combination of column , stackedColumn , and line (e.g., column|line ). Attribute sets Axis Attribute Description Type axisLineStyle The style of the axis line. A LineComponentStyle attribute set. axisGuidelineStyle The style of axis guidelines. A LineComponentStyle attribute set. axisTickStyle The style of axis ticks. A LineComponentStyle attribute set. axisLabelStyle The style of axis labels. A TextComponentStyle attribute set. axisTickLength The length of axis ticks. A dimension. axisLabelBackground The background for axis labels. A color or a Shape attribute set. verticalAxisHorizontalLabelPosition The horizontal position of the labels on this axis if it is vertical. outside or inside . verticalAxisVerticalLabelPosition The vertical position of the labels on this axis is if it vertical. top , center , or bottom . labelRotationDegrees The rotation of axis labels in degrees. A floating-point number. title The axis title. A string or a reference. showTitle Whether to display the axis title. A boolean or a reference. titleStyle The style of the axis title. A TextComponentStyle attribute set. ComponentStyle Attribute Description Type color The background color. A color. shapeStyle The shape style. A Shape attribute set. strokeColor The stroke color. A color. strokeWidth The stroke width. A dimension. overlayingComponentStyle A component with which to overlay this component. A ComponentStyle attribute set. overlayingComponentPadding The padding between this component and the component with which it is overlaid. A dimension. ColumnChartStyle Attribute Description Type column1Style The style for columns whose index in a segment is 3 k ( k \u2208 N ). A ComponentStyle attribute set. column2Style The style for columns whose index in a segment is 1 + 3 k ( k \u2208 N ). A ComponentStyle attribute set. column3Style The style for columns whose index in a segment is 2 + 3 k ( k \u2208 N ). A ComponentStyle attribute set. columnOuterSpacing The spacing between the columns contained in chart segments. A dimension. columnInnerSpacing The horizontal padding between the edges of chart segments and the columns they contain. A dimension. showDataLabels Whether to show data labels. A boolean. dataLabelStyle The style of data labels. A TextComponentStyle attribute set. dataLabelVerticalPosition The vertical position of each data label relative to the top edge of its respective column. top , center , or bottom . dataLabelRotationDegrees The rotation of data labels in degrees. A floating-point number. TextComponentStyle Attribute Description Type labelColor The text color. A color. backgroundStyle The background for the label. A ComponentStyle attribute set. android:padding The padding for each edge of the label. A dimension. android:padding* The padding for a specific edge or edge pair of the label. A dimension. android:fontFamily The font family. sans-serif , sans-serif-* , or an @font reference. android:textFontWeight The font weight. An integer between 100 and 900. android:fontStyle The font style. normal or italic . android:textSize The text size. A dimension. android:ellipsize The text truncation behavior. start , end , middle , none , or marquee . LineChartStyle Attribute Description Type line1Spec The style for lines whose index in the list of lines in a line chart is 3 k ( k \u2208 N ). A LineSpec attribute set. line2Spec The style for lines whose index in the list of lines in a line chart is 1 + 3 k ( k \u2208 N ). A LineSpec attribute set. line3Spec The style for lines whose index in the list of lines in a line chart is 2 + 3 k ( k \u2208 N ). A LineSpec attribute set. spacing The point spacing. A dimension. LineComponentStyle Attribute Description Type color The background color. A color. thickness The line thickness. A dimension. shapeStyle The shape of the line. A Shape attribute set. strokeColor The stroke color. A color. strokeWidth The stroke width. A dimension. LineSpec Attribute Description Type color The line color. A color. gradientTopColor The top color of the vertical background gradient. A color. gradientBottomColor The bottom color of the vertical background gradient. A color. pointSize The point size. A dimension. lineThickness The thickness of the line. A dimension. pointStyle The style of points. A ComponentStyle attribute set. cubicStrength The strength of the cubic bezier curve between each key point on the line. A fraction. showDataLabels Whether to show data labels. A boolean. dataLabelStyle The style of data labels. A TextComponentStyle attribute set. dataLabelVerticalPosition The vertical position of each data label relative to its respective point on the line. top , center , or bottom . dataLabelRotationDegrees The rotation of data labels in degrees. A floating-point number. Shape Attribute Description Type cornerSize The corner size. A dimension or a fraction. cornerTreatment The corner style. rounded or cut . topStartCornerSize The size of the top-start corner. A dimension or a fraction. topEndCornerSize The size of the top-end corner. A dimension or a fraction. bottomStartCornerSize The size of the bottom-start corner. A dimension or a fraction. bottomEndCornerSize The size of the bottom-end corner. A dimension or a fraction. dashLength The dash length ( 0 for no dashes). A dimension. dashGapLength The dash gap length ( 0 for no dashes). A dimension.","title":"Customization in the view system"},{"location":"customization/customization-in-the-view-system/#view-attributes","text":"","title":"View attributes"},{"location":"customization/customization-in-the-view-system/#basechartview-attributes","text":"Name Description Type axisStyle The style of chart axes. An Axis attribute set. columnChartStyle The style of column charts. A ColumnChartStyle attribute set. lineChartStyle The style of line charts. A LineChartStyle attribute set. show*Axis Whether to show a specific axis. A boolean. chartHorizontalScrollingEnabled Whether to enable horizontal scrolling. A boolean. chartZoomEnabled Whether to enable zooming. A boolean.","title":"BaseChartView attributes"},{"location":"customization/customization-in-the-view-system/#chartview-attributes","text":"ChartView has all the attributes of BaseChartView , plus the following. Name Description Value chart The chart type. column , stackedColumn , or line .","title":"ChartView attributes"},{"location":"customization/customization-in-the-view-system/#composedchartview-attributes","text":"ComposedChartView has all the attributes of BaseChartView , plus the following. Name Description Value charts The chart types. Any combination of column , stackedColumn , and line (e.g., column|line ).","title":"ComposedChartView attributes"},{"location":"customization/customization-in-the-view-system/#attribute-sets","text":"","title":"Attribute sets"},{"location":"customization/customization-in-the-view-system/#axis","text":"Attribute Description Type axisLineStyle The style of the axis line. A LineComponentStyle attribute set. axisGuidelineStyle The style of axis guidelines. A LineComponentStyle attribute set. axisTickStyle The style of axis ticks. A LineComponentStyle attribute set. axisLabelStyle The style of axis labels. A TextComponentStyle attribute set. axisTickLength The length of axis ticks. A dimension. axisLabelBackground The background for axis labels. A color or a Shape attribute set. verticalAxisHorizontalLabelPosition The horizontal position of the labels on this axis if it is vertical. outside or inside . verticalAxisVerticalLabelPosition The vertical position of the labels on this axis is if it vertical. top , center , or bottom . labelRotationDegrees The rotation of axis labels in degrees. A floating-point number. title The axis title. A string or a reference. showTitle Whether to display the axis title. A boolean or a reference. titleStyle The style of the axis title. A TextComponentStyle attribute set.","title":"Axis"},{"location":"customization/customization-in-the-view-system/#componentstyle","text":"Attribute Description Type color The background color. A color. shapeStyle The shape style. A Shape attribute set. strokeColor The stroke color. A color. strokeWidth The stroke width. A dimension. overlayingComponentStyle A component with which to overlay this component. A ComponentStyle attribute set. overlayingComponentPadding The padding between this component and the component with which it is overlaid. A dimension.","title":"ComponentStyle"},{"location":"customization/customization-in-the-view-system/#columnchartstyle","text":"Attribute Description Type column1Style The style for columns whose index in a segment is 3 k ( k \u2208 N ). A ComponentStyle attribute set. column2Style The style for columns whose index in a segment is 1 + 3 k ( k \u2208 N ). A ComponentStyle attribute set. column3Style The style for columns whose index in a segment is 2 + 3 k ( k \u2208 N ). A ComponentStyle attribute set. columnOuterSpacing The spacing between the columns contained in chart segments. A dimension. columnInnerSpacing The horizontal padding between the edges of chart segments and the columns they contain. A dimension. showDataLabels Whether to show data labels. A boolean. dataLabelStyle The style of data labels. A TextComponentStyle attribute set. dataLabelVerticalPosition The vertical position of each data label relative to the top edge of its respective column. top , center , or bottom . dataLabelRotationDegrees The rotation of data labels in degrees. A floating-point number.","title":"ColumnChartStyle"},{"location":"customization/customization-in-the-view-system/#textcomponentstyle","text":"Attribute Description Type labelColor The text color. A color. backgroundStyle The background for the label. A ComponentStyle attribute set. android:padding The padding for each edge of the label. A dimension. android:padding* The padding for a specific edge or edge pair of the label. A dimension. android:fontFamily The font family. sans-serif , sans-serif-* , or an @font reference. android:textFontWeight The font weight. An integer between 100 and 900. android:fontStyle The font style. normal or italic . android:textSize The text size. A dimension. android:ellipsize The text truncation behavior. start , end , middle , none , or marquee .","title":"TextComponentStyle"},{"location":"customization/customization-in-the-view-system/#linechartstyle","text":"Attribute Description Type line1Spec The style for lines whose index in the list of lines in a line chart is 3 k ( k \u2208 N ). A LineSpec attribute set. line2Spec The style for lines whose index in the list of lines in a line chart is 1 + 3 k ( k \u2208 N ). A LineSpec attribute set. line3Spec The style for lines whose index in the list of lines in a line chart is 2 + 3 k ( k \u2208 N ). A LineSpec attribute set. spacing The point spacing. A dimension.","title":"LineChartStyle"},{"location":"customization/customization-in-the-view-system/#linecomponentstyle","text":"Attribute Description Type color The background color. A color. thickness The line thickness. A dimension. shapeStyle The shape of the line. A Shape attribute set. strokeColor The stroke color. A color. strokeWidth The stroke width. A dimension.","title":"LineComponentStyle"},{"location":"customization/customization-in-the-view-system/#linespec","text":"Attribute Description Type color The line color. A color. gradientTopColor The top color of the vertical background gradient. A color. gradientBottomColor The bottom color of the vertical background gradient. A color. pointSize The point size. A dimension. lineThickness The thickness of the line. A dimension. pointStyle The style of points. A ComponentStyle attribute set. cubicStrength The strength of the cubic bezier curve between each key point on the line. A fraction. showDataLabels Whether to show data labels. A boolean. dataLabelStyle The style of data labels. A TextComponentStyle attribute set. dataLabelVerticalPosition The vertical position of each data label relative to its respective point on the line. top , center , or bottom . dataLabelRotationDegrees The rotation of data labels in degrees. A floating-point number.","title":"LineSpec"},{"location":"customization/customization-in-the-view-system/#shape","text":"Attribute Description Type cornerSize The corner size. A dimension or a fraction. cornerTreatment The corner style. rounded or cut . topStartCornerSize The size of the top-start corner. A dimension or a fraction. topEndCornerSize The size of the top-end corner. A dimension or a fraction. bottomStartCornerSize The size of the bottom-start corner. A dimension or a fraction. bottomEndCornerSize The size of the bottom-end corner. A dimension or a fraction. dashLength The dash length ( 0 for no dashes). A dimension. dashGapLength The dash gap length ( 0 for no dashes). A dimension.","title":"Shape"},{"location":"customization/shapes/","text":"A Shape defines the appearance of a ShapeComponent . Most of the predefined Shape implementations are accessible via the Shapes object. Rectangle This is the simplest kind of Shape . It displays a rectangle with sharp edges. Shapes . rectShape Pill A pill is a rectangle with all corners fully rounded. Shapes . pillShape Rounded-corner shape This shape type displays a rectangle with its corners rounded by the specified radii. Examples: a shared corner radius Shapes . roundedCornerShape ( allPercent = 25 ) different corner radii for each corner Shapes . roundedCornerShape ( topLeftPercent = 50 , bottomRightPercent = 75 ) Cut-corner shape Displays a rectangle with its corners cut by the specified sizes. Examples: a common cut size Shapes . cutCornerShape ( allPercent = 25 ) different cut sizes for each corner Shapes . cutCornerShape ( topRightPercent = 100 , bottomLeftPercent = 15 ) Drawable shape Drawable s can be converted to Shape s. The built-in converter function can: keep the Drawable \u2019s aspect ratio to prevent it from being stretched, apply a tint equal to the parent ShapeComponent \u2019s color, and use another Shape to fill in the remaining space if the Drawable can\u2019t fill all of the available space. Examples: with keepAspectRatio and otherShape Shapes . drawableShape ( drawable = getDrawable ( id = R . drawable . ic_baseline_android_24 ), keepAspectRatio = true , otherShape = Shapes . pillShape , ) without keepAspectRatio Shapes . drawableShape ( getDrawable ( id = R . drawable . ic_baseline_android_24 )) Dashed shape DashedShape draws a dashed line along a path by interchangeably drawing a provided shape and leaving a gap. It is used for the default axis guidelines, among other things. For all available parameters, see the documentation . Shapes . dashedShape ( shape = Shapes . cutCornerShape ( topRightPercent = 50 , bottomLeftPercent = 50 ), dashLength = 24. dp , gapLength = 8. dp , )","title":"Shapes"},{"location":"customization/shapes/#rectangle","text":"This is the simplest kind of Shape . It displays a rectangle with sharp edges. Shapes . rectShape","title":"Rectangle"},{"location":"customization/shapes/#pill","text":"A pill is a rectangle with all corners fully rounded. Shapes . pillShape","title":"Pill"},{"location":"customization/shapes/#rounded-corner-shape","text":"This shape type displays a rectangle with its corners rounded by the specified radii. Examples: a shared corner radius Shapes . roundedCornerShape ( allPercent = 25 ) different corner radii for each corner Shapes . roundedCornerShape ( topLeftPercent = 50 , bottomRightPercent = 75 )","title":"Rounded-corner shape"},{"location":"customization/shapes/#cut-corner-shape","text":"Displays a rectangle with its corners cut by the specified sizes. Examples: a common cut size Shapes . cutCornerShape ( allPercent = 25 ) different cut sizes for each corner Shapes . cutCornerShape ( topRightPercent = 100 , bottomLeftPercent = 15 )","title":"Cut-corner shape"},{"location":"customization/shapes/#drawable-shape","text":"Drawable s can be converted to Shape s. The built-in converter function can: keep the Drawable \u2019s aspect ratio to prevent it from being stretched, apply a tint equal to the parent ShapeComponent \u2019s color, and use another Shape to fill in the remaining space if the Drawable can\u2019t fill all of the available space. Examples: with keepAspectRatio and otherShape Shapes . drawableShape ( drawable = getDrawable ( id = R . drawable . ic_baseline_android_24 ), keepAspectRatio = true , otherShape = Shapes . pillShape , ) without keepAspectRatio Shapes . drawableShape ( getDrawable ( id = R . drawable . ic_baseline_android_24 ))","title":"Drawable shape"},{"location":"customization/shapes/#dashed-shape","text":"DashedShape draws a dashed line along a path by interchangeably drawing a provided shape and leaving a gap. It is used for the default axis guidelines, among other things. For all available parameters, see the documentation . Shapes . dashedShape ( shape = Shapes . cutCornerShape ( topRightPercent = 50 , bottomLeftPercent = 50 ), dashLength = 24. dp , gapLength = 8. dp , )","title":"Dashed shape"}]}